import typing 
import contextlib

class DuktapeError(Exception):
    pass

class DuktapeThreadError(DuktapeError):
    pass

class JSError(Exception):
    pass

class JSRef(object):
    def __init__(self,py_ctx:"DuktapeContext",ref_index:int):...
    def to_js(self) -> None:...

class DuktapeContext:
    def __init__(self) -> None:...
    def _check_thread(self) -> None:...
    def set_globals(self, **kwargs) -> None:...
    def get_global(self, name:str) -> typing.Any:...
    def set_base_path(self,path:str) -> None:...
    def eval_js(self, src:str) -> typing.Union[JSProxy,typing.Any]:...
    def eval_js_file(self,src_path:str) -> typing.Any:...
    def get_file_path(self, src_path:str) -> typing.Any:...
    def make_jsref(self,index) -> JSRef:...
    def _eval_js(self, eval_function:str):...
    def __del__(self):...

class JSProxy(object):
    def __init__(self,ref:JSRef,bind_proxy:"JSProxy") -> None:...
    def __setattr__(self,name:typing.Union[str,int],value:typing.Union[str,int,float]) -> None:...
    def __getattr__(self,name:typing.Union[str,int]) -> typing.Any:...
    def __repr__(self) -> str:...
    def __call__(self, *args) -> typing.Union["JSProxy",typing.Any]:...
    def new(self,*args):...
    def __nonzero__(self) -> bool:...
    def __len__(self) -> int:...
    def __iter__(self) -> typing.Generator[typing.Union["JSProxy",typing.Any],None,None]:...
    def to_js(self) -> None:...


@contextlib.contextmanager
def wrap_python_exception(py_ctx:DuktapeContext) -> None:...


